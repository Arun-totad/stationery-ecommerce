rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        getUserRole() == 'admin';
    }
    
    function isAdminManager() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        getUserRole() == 'admin-manager';
    }
    
    function isVendor() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        getUserRole() == 'vendor';
    }
    
    function isCustomer() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        getUserRole() == 'customer';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isVendorOwner(vendorId) {
      return isAuthenticated() && request.auth.uid == vendorId;
    }

    // Users collection
    match /users/{userId} {
      allow read: if resource.data.role == 'vendor' || isOwner(userId) || isAdmin() || isAdminManager();
      allow list: if true; // Allow anyone to list users (but only vendor docs will be readable)
      allow update: if isOwner(userId) || isAdmin() || isAdminManager();
      allow create: if isAuthenticated();
      allow delete: if isAdmin() || isAdminManager();
    }

    // Products collection
    match /products/{productId} {
      allow read: if true; // Public read access for products
      allow create: if isAuthenticated() && isVendor();
      allow update: if isAuthenticated() && (
        isVendorOwner(resource.data.vendorId) || 
        isAdmin() || 
        isAdminManager() ||
        // Allow stock updates during order placement (only stock field can be updated)
        (
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['stock']) &&
          request.resource.data.stock <= resource.data.stock // Only allow decreasing stock
        )
      );
      allow delete: if isAuthenticated() && (
        isVendorOwner(resource.data.vendorId) || 
        isAdmin() || 
        isAdminManager()
      );
    }

    // Orders collection
    match /orders/{orderId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isVendorOwner(resource.data.vendorId) || 
        isAdmin() || 
        isAdminManager()
      );
      allow create: if isAuthenticated(); // Allow any authenticated user to create orders
      allow update: if isAuthenticated() && (
        (
          isOwner(resource.data.userId) &&
          // Only allow changing status to 'cancelled' and updating updatedAt
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['status', 'updatedAt']) &&
          request.resource.data.status == 'cancelled'
        ) ||
        isVendorOwner(resource.data.vendorId) || 
        isAdmin() || 
        isAdminManager()
      );
      allow delete: if isAuthenticated() && (isAdmin() || isAdminManager());
    }

    // Carts collection
    match /carts/{cartId} {
      allow read, create, update, delete: if isAuthenticated() && isOwner(cartId);
    }

    // Support tickets collection
    match /supportTickets/{ticketId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin() || isAdminManager());
      allow list: if isAuthenticated() && (isOwner(request.auth.uid) || isAdmin() || isAdminManager());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin() || isAdminManager());
      allow delete: if isAdmin() || isAdminManager();
    }

    // Coupons collection
    match /coupons/{couponId} {
      allow read: if isAuthenticated();
      allow list: if isAuthenticated();
      allow create: if (isAdmin() || isAdminManager()) && 
        request.resource.data.code is string &&
        request.resource.data.code.size() > 0 &&
        request.resource.data.name is string &&
        request.resource.data.name.size() > 0 &&
        request.resource.data.discountValue is number &&
        request.resource.data.discountValue > 0 &&
        request.resource.data.validFrom is timestamp &&
        request.resource.data.validUntil is timestamp &&
        request.resource.data.validUntil > request.resource.data.validFrom;
      allow update: if (isAdmin() || isAdminManager()) && 
        request.resource.data.code is string &&
        request.resource.data.code.size() > 0 &&
        request.resource.data.name is string &&
        request.resource.data.name.size() > 0 &&
        request.resource.data.discountValue is number &&
        request.resource.data.discountValue > 0 &&
        request.resource.data.validFrom is timestamp &&
        request.resource.data.validUntil is timestamp &&
        request.resource.data.validUntil > request.resource.data.validFrom;
      allow delete: if isAdmin() || isAdminManager();
    }

    // Coupon usage collection
    match /couponUsage/{usageId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin() || isAdminManager());
      allow list: if isAuthenticated() && (isOwner(request.auth.uid) || isAdmin() || isAdminManager());
      allow create: if isAuthenticated() && 
        request.resource.data.couponId is string &&
        request.resource.data.userId is string &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.orderId is string &&
        request.resource.data.discountAmount is number &&
        request.resource.data.discountAmount > 0 &&
        request.resource.data.usedAt is timestamp;
      allow update: if isAdmin() || isAdminManager();
      allow delete: if isAdmin() || isAdminManager();
    }

    // Transactions collection
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && (isAdmin() || isAdminManager());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isAdmin() || isAdminManager());
      allow delete: if isAuthenticated() && (isAdmin() || isAdminManager());
    }

    // Categories collection
    match /categories/{categoryId} {
      allow read: if true; // Public read access for all categories
      allow create: if isAuthenticated() && (
        isAdmin() || 
        isAdminManager() || 
        isVendor()
      );
      allow update: if isAuthenticated() && (
        isAdmin() || 
        isAdminManager() || 
        (
          isVendor() && 
          resource.data.createdBy == request.auth.uid
        )
      );
      allow delete: if isAuthenticated() && (
        isAdmin() || 
        isAdminManager() || 
        (
          isVendor() && 
          resource.data.createdBy == request.auth.uid
        )
      );
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isAuthenticated() && isCustomer();
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isAdmin() || 
        isAdminManager()
      );
    }

    // Allow customers to read and update the orderMeta/numbering document for order number generation
    match /orderMeta/numbering {
      allow get, update, create: if request.auth != null;
    }

    // Allow authenticated users to read and update the ticketMeta/numbering document for ticket number generation
    match /ticketMeta/numbering {
      allow get, update, create: if request.auth != null;
    }

    // Allow authenticated users to read and update the userMeta/numbering document for user number generation
    match /userMeta/numbering {
      allow get, update, create: if request.auth != null;
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // Allow users to read their own notifications
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      // Allow users to create notifications for themselves
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      // Allow users to update (e.g., mark as read) their own notifications
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      // Only admins can delete notifications
      allow delete: if isAdmin() || isAdminManager();
    }
  }
} 